{"version":3,"sources":["components/TaskForm.js","components/Sort.js","components/Search.js","components/SearchSort.js","components/TaskListItem.js","components/TaskListTable.js","App.js","serviceWorker.js","index.js"],"names":["TaskForm","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","NewTask","event","target","value","name","setState","defineProperty","onSubmit","preventDefault","state","onClearForm","onCloseForm","status","id","taskUpdate","nextProps","react_default","a","createElement","Fragment","className","onClick","htmlFor","type","placeholder","onChange","Component","Sort","sortName","sortBy","sortValue","onSort","console","log","_this2","_this$props","data-toggle","aria-haspopup","aria-expanded","aria-labelledby","Search","_handleChange","onSearch","keyword","aria-label","SearchSort","components_Sort","components_Search","TaskListItem","lable","item","statusItem","onDelete","onUpdate","index","TaskListTable","_this$state","filterName","filterStatus","onFilter","tasks","_this$state2","taskItem","map","components_TaskListItem","key","style","width","App","_ToggleNewTask","isDisplayForm","taskEditing","onShowForm","data","findIndexById","generateId","concat","localStorage","setItem","JSON","stringify","result","forEach","task","itemDelete","find","is","splice","filter","toLowerCase","getItem","parse","Math","floor","random","toString","substring","s4","indexOf","sort","b","elmTaskForm","components_TaskForm","components_SearchSort","components_TaskListTable","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c7b3607a.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass TaskForm extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            id: '',\n            name: '',\n            status: 1\n        }\n    }\n    NewTask = (event) => {\n        const target = event.target;\n        let value = target.value;\n        const name = target.name;           \n        this.setState({\n            [name]: value\n        })\n        // this.setState({ [name] : (value) ? null : parseInt(value) }) \n    }\n    onSubmit = (event) => {\n        event.preventDefault();\n        this.props.onSubmit(this.state);\n        this.onClearForm();\n    }\n    onCloseForm = () => {\n        this.props.onCloseForm();\n    }\n    onClearForm = () => {\n        this.setState({\n            name: '',\n            status: 1\n        })\n    }\n    componentDidMount() {\n        if (this.props.taskUpdate) {\n            this.setState({\n                id: this.props.taskUpdate.id,\n                name: this.props.taskUpdate.name,\n                status: this.props.taskUpdate.status\n            });\n        }\n    }\n    componentWillReceiveProps(nextProps) {\n        if (nextProps && nextProps.taskUpdate) {\n            this.setState({\n                id: nextProps.taskUpdate.id,\n                name: nextProps.taskUpdate.name,\n                status: nextProps.taskUpdate.status\n            });\n        }\n        else if (!nextProps.taskUpdate) {\n            this.setState({\n                id: '',\n                name: '',\n                status: 1\n            })\n        }\n    }\n    render() {\n        const { id } = this.state;\n        return (\n            <>\n                <div className=\"col-sm-4 \">\n                    <div className=\"card bg-light mb-3\">\n                        <div className=\"card-header\">{id !== '' ? 'Update Job' : 'Add new job'}<button onClick={this.onCloseForm} className=\"btn btn-sm btn-danger fa fa-remove float-right\"></button></div>\n                        <div className=\"card-body\">\n                            <form onSubmit={this.onSubmit}>\n                                <div className=\"form-row\">\n                                    <div className=\"form-group col-sm-12 text-left\">\n                                        <label htmlFor=\"inputEmail4\">Name</label>\n                                        <input\n                                            name=\"name\" type=\"text\" className=\"form-control\" id=\"inputEmail4\" placeholder=\"Name\"\n                                            value={this.state.name}\n                                            onChange={this.NewTask}\n                                        />\n                                    </div>\n                                    <div className=\"form-group col-sm-12 text-left\">\n                                        <label htmlFor=\"inputState\">Process</label>\n                                        <select\n                                            id=\"inputState\" className=\"form-control\" name=\"status\"\n                                            value={this.state.status}\n                                            onChange={this.NewTask}\n                                        >\n                                            <option value={1}>Finish</option>\n                                            <option value={2}>Ongoing</option>\n                                            <option value={3}>Unmake</option>\n                                        </select>\n                                    </div>\n                                </div>\n                                <button type=\"submit\" className=\"btn btn-success ml-1 mr-1\">Save Job</button>\n                                <button \n                                    type=\"reset\" className=\"btn btn-danger ml-1 mr-1\"\n                                    onClick={this.onClearForm}\n                                >Cancel</button>\n                            </form>\n                        </div>\n                    </div>\n                </div>\n            </>\n        );\n    }\n}\n\nexport default TaskForm;","import React, { Component } from 'react';\n\nclass Sort extends Component {\n    componentWillReceiveProps(nextProps){\n        console.log(nextProps);\n        \n    }\n    sortName = (sortBy, sortValue) => {;\n        this.props.onSort(sortBy, sortValue);\n    }\n    render() {\n        const { sortBy, sortValue } = this.props;\n        return (\n            <>\n                <div className=\"dropdown float-left mr-1 ml-1\">\n                    <button className=\"btn btn-info dropdown-toggle\" type=\"button\" id=\"dropdownMenu2\"\n                        data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n                        Sort\n                        </button>\n                    <div className=\"dropdown-menu\" aria-labelledby=\"dropdownMenu2\">\n                        <button\n                            className={ (sortBy === 'name' && sortValue === 1) ? 'dropdown-item fa fa-check mr-2' : 'dropdown-item'} type=\"button\"\n                            onClick={() => this.sortName('name', 1)}\n                        > Name to <i className=\"fa fa-sort-alpha-asc\"></i></button>\n                        <button\n                            className={ (sortBy === 'name' && sortValue === -1) ? 'dropdown-item fa fa-check mr-2' : 'dropdown-item'}  type=\"button\"\n                            onClick={() => this.sortName('name', -1)}\n                        > Name to <i className=\"fa fa-sort-alpha-desc\"></i></button>\n                        {/* <hr /> */}\n                        {/* <button onClick={() => this.sortName('status', 1)} className={ (sortBy === 'status' && sortValue === 1) ? 'dropdown-item fa fa-check mr-2' : 'dropdown-item'}  type=\"button\">Finish</button>\n                        <button onClick={() => this.sortName('status', 2)} className={ (sortBy === 'status' && sortValue === 2) ? 'dropdown-item fa fa-check mr-2' : 'dropdown-item'}  type=\"button\">Ongoing</button>\n                        <button onClick={() => this.sortName('status', -1)} className={ (sortBy === 'status' && sortValue === 3) ? 'dropdown-item fa fa-check mr-2' : 'dropdown-item'}  type=\"button\">Unmake</button> */}\n                    </div>\n                </div>\n            </>\n        );\n    }\n}\n\nexport default Sort;","import React, { Component } from 'react';\nclass Search extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            keyword: ''\n        }\n    }\n    _handleChange = (event) => {\n        const target = event.target;\n        const value = target.value;\n        const name = target.name;\n        this.setState({\n            [name] : value\n        })\n    }\n    onSearch = () => {\n        this.props.onSearch(this.state.keyword);\n    }\n    render() {\n        const { keyword } = this.state;\n        return (\n            <>\n                <div className=\"form-inline my-2 my-lg-0\">\n                    <input \n                        className=\"form-control mr-sm-2\" type=\"search\" \n                        placeholder=\"Search\" aria-label=\"Search\" \n                        name=\"keyword\"\n                        value={keyword}\n                        onChange={ this._handleChange }\n                    />\n                    <button \n                        className=\"btn btn-outline-info my-2 my-sm-0\" type=\"submit\"\n                        onClick={ this.onSearch }\n                    >Search</button>\n                </div>\n            </>\n        );\n    }\n}\n\nexport default Search;","import React, { Component } from 'react';\nimport Sort from './Sort';\nimport Search from './Search';\n\nclass SearchSort extends Component {\n    render() {\n        return (\n            <>\n                <div className=\"float-right\">\n                    <Sort onSort={ this.props.onSort }\n                        sortBy={ this.props.sortBy }\n                        sortValue={ this.props.sortValue }\n                    />\n                    <Search onSearch={ this.props.onSearch }/>\n                </div>\n            </>\n        );\n    }\n}\n\nexport default SearchSort;","import React, { Component } from 'react';\n\nclass TaskListItem extends Component {\n\n    lable = () => {\n        const { item } = this.props;\n        if (item.status === 1)\n            return \"btn btn-sm btn-success\";\n        if (item.status === 2)\n            return \"btn btn-sm btn-info\";\n        if (item.status === 3)\n            return \"btn btn-sm btn-warning\";\n    }\n    statusItem = () => {\n        const { item } = this.props;\n        if (item.status === 1)\n            return \"Finish\";\n        if (item.status === 2)\n            return \"Ongoing\";\n        if (item.status === 3)\n            return \"Unmake\";\n    }\n    \n    onDelete = () => {\n        this.props.onDelete(this.props.item.id);\n\n    }\n    onUpdate = () => {\n        this.props.onUpdate(this.props.item.id);\n\n    }\n    render() {\n        const { item, index } = this.props;\n        item.status = +item.status\n        return (\n            <>\n                <tr>\n                    <td>{index + 1} </td>\n                    <td>{item.name}</td>\n                    <td >\n                        <span className={this.lable()} > {this.statusItem()} </span>\n\n                    </td>\n                    <td>\n                        <div className=\"btn-group\">\n                            <button \n                                className=\"btn btn-sm btn-warning\"\n                                onClick={ this.onUpdate}\n                            ><i className=\"fa fa-pencil\"></i></button>\n                            <button \n                                className=\"btn btn-sm btn-danger\"\n                                onClick={this.onDelete}\n                                ><i className=\"fa fa-remove\"></i></button>\n                        </div>\n\n                    </td>\n                </tr>\n            </>\n        );\n    }\n}\n\nexport default TaskListItem;","import React, { Component } from 'react';\n\nimport TaskListItem from './TaskListItem';\nclass TaskListTable extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            filterName: '',\n            filterStatus: -1\n        }\n    }\n    _handleChange = (event) => {\n        const target = event.target;\n        const value = target.value;\n        const name = target.name;\n        let { filterName, filterStatus } = this.state;\n        this.props.onFilter(\n            name === 'filterName' ? value : filterName,\n            name === 'filterStatus' ? value : filterStatus\n        );\n        this.setState({\n            [name] : value \n        });\n    }\n    render() {\n        const { tasks } = this.props;\n        let { filterName, filterStatus } = this.state;\n        const taskItem = tasks.map((item, index) => {\n            return <TaskListItem\n                key={item.id}\n                index={index}\n                item={item}\n                onDelete={this.props.onDelete}\n                onUpdate={this.props.onUpdate}\n            />\n        })\n        return (\n            <>\n                <table id=\"example\" className=\"table table-striped table-bordered\" style={{ width: '100%' }}>\n                    <thead>\n                        <tr>\n                            <th>Index</th>\n                            <th>Name</th>\n                            <th>Status</th>\n                            <th>Action</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        <tr>\n                            <td></td>\n                            <td>\n                                <input \n                                    type=\"text\" className=\"form-control\" \n                                    id=\"inputEmail4\" placeholder=\"Name\" \n                                    name=\"filterName\"\n                                    value={ filterName }\n                                    onChange={ this._handleChange }\n                                    />\n                            </td>\n                            <td>\n                                <select \n                                    id=\"inputState\" className=\"form-control\"\n                                    name=\"filterStatus\"\n                                    value={ filterStatus }\n                                    onChange={ this._handleChange }\n                                >\n                                    <option value={-1}>All</option>\n                                    <option value={1}>Finish</option>\n                                    <option value={2}>Ongoing</option>\n                                    <option value={3}>Unmake</option>\n                                </select>\n                            </td>\n                            <td>\n                            </td>\n                        </tr>\n                        {taskItem}\n                    </tbody>\n                    <tfoot>\n                        <tr>\n                            <th>Index</th>\n                            <th>Name</th>\n                            <th>Status</th>\n                            <th>Action</th>\n                        </tr>\n                    </tfoot>\n                </table>\n            </>\n        );\n    }\n}\n\nexport default TaskListTable;","import './App.css';\nimport React, { Component } from 'react';\nimport TaskForm from './components/TaskForm';\nimport SearchSort from './components/SearchSort';\nimport TaskListTable from './components/TaskListTable';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      tasks: [],\n      isDisplayForm: false,\n      taskEditing: null,\n      filter: {\n        name: '',\n        status: -1\n      },\n      keyword: '',\n      sortBy: 'name',\n      sortValue: -1\n    }\n  }\n  componentWillMount() {\n    if (localStorage && localStorage.getItem('tasks')) {\n      const tasks = JSON.parse(localStorage.getItem('tasks'));\n      this.setState({ tasks: tasks });\n    }\n    // localStorage.setItem('tasks', JSON.stringify(tasks));\n  }\n  _ToggleNewTask = () => {\n    const { isDisplayForm, taskEditing } = this.state;\n    if (isDisplayForm && taskEditing !== null) {\n      this.setState({ isDisplayForm: true, taskEditing: null })\n    }\n    else {\n      this.setState({ isDisplayForm: !isDisplayForm, taskEditing: null })\n    }\n  }\n  onCloseForm = () => {\n    const { isDisplayForm } = this.state;\n    this.setState({ isDisplayForm: !isDisplayForm })\n  }\n  onShowForm = () => {\n    const { isDisplayForm } = this.state;\n    this.setState({ isDisplayForm: true })\n  }\n  onSubmit = (data) => {\n    let { tasks } = this.state;\n    if (!data.id) {\n      data.id = this.generateId();\n      tasks = tasks.concat(data);\n    }\n    else {\n      const index = this.findIndexById(data.id);\n      tasks[index] = data;\n    }\n    this.setState({\n      tasks: tasks,\n      taskEditing: null\n    });\n    console.log(tasks)\n    localStorage.setItem('tasks', JSON.stringify(tasks));\n  }\n\n  s4() {\n    return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);\n  }\n  generateId() {\n    return this.s4() + this.s4() + this.s4() + this.s4() + this.s4() + this.s4() + this.s4() + this.s4()\n  }\n  //tim index theo id\n  findIndexById = (id) => {\n    const { tasks } = this.state;\n    let result = -1;\n    tasks.forEach((task, index) => {\n      if (task.id === id) {\n        result = index;\n      }\n    });\n    return result;\n  }\n  onDelete = (id) => {\n    const { tasks } = this.state;\n    let index = tasks.find(task => Object.is(id, task.id));\n    let itemDelete = index.id;\n    // let infoUser = users.find(user => Object.is(username.toString(), user.username.toString()));\n\n    if (itemDelete !== -1) {\n      tasks.splice(itemDelete, 1);\n      this.setState({\n        tasks: tasks,\n        isDisplayForm: false\n      });\n      localStorage.setItem('tasks', JSON.stringify(tasks));\n    }\n\n  }\n  onUpdate = (id) => {\n    const { tasks } = this.state;\n    const index = this.findIndexById(id);\n    const taskEditing = tasks[index];\n    console.log(taskEditing);\n    this.setState({\n      taskEditing: taskEditing\n    });\n    this.onShowForm();\n  }\n\n  onFilter = (filterName, filterStatus) => {\n    console.log(filterName, '-', filterStatus);\n    filterStatus = +filterStatus;\n    this.setState({\n      filter: {\n        name: filterName.toLowerCase(),\n        status: filterStatus\n      }\n\n    })\n  }\n  onSearch = (keyword) => {\n    // console.log(keyword);\n    this.setState({\n      keyword: keyword\n    });\n  }\n  onSort = (sortBy, sortValue) => {\n    // console.log(sortBy, sortValue);\n    this.setState({\n      sortBy: sortBy,\n      sortValue: sortValue\n    })\n  }\n  render() {\n    var { tasks, isDisplayForm, taskEditing, filter, keyword, sortBy, sortValue } = this.state;\n    /////filter\n    if (filter) {\n      if (filter.name) {\n        tasks = tasks.filter(task => {\n          return task.name.toLowerCase().indexOf(filter.name) !== -1;\n        });\n      }\n      tasks = tasks.filter(task => {\n        if (filter.status === -1) {\n          return task;\n        }\n        else {\n          return task.status === filter.status;\n        }\n      });\n    }\n    /////search\n    if (keyword) {\n      tasks = tasks.filter(task => {\n        return task.name.toLowerCase().indexOf(keyword) !== -1;\n      });\n    }\n    // console.log(filter);\n    //sort\n    if (sortBy === 'name') {\n      tasks.sort((a, b) => {\n        if (a.name > b.name) return sortValue;\n        else if (a.name < b.name) return -sortValue;\n        else return 0;\n      });\n    }\n    // else {\n    //   tasks.sort((a, b) => {\n    //     if (a.status > b.status) return sortValue;\n    //     else if (a.status < b.status) return -sortValue;\n    //     else return 0;\n    //   });\n    // }\n    const elmTaskForm = isDisplayForm ? <TaskForm\n      onSubmit={this.onSubmit}\n      onCloseForm={this.onCloseForm}\n      taskUpdate={taskEditing}\n    /> : '';\n    return (\n      <div className=\"App\">\n        <div className=\"container\">\n          <div className=\"row\">\n            <div className=\"col-sm-12 mt-3 mb-3 text-sm-center mx-auto\">\n              <h2>TODO JOB</h2>\n            </div>\n          </div>\n          <div className=\"row\">\n            {elmTaskForm}\n            <div className=\"col\">\n              <button onClick={this._ToggleNewTask} className=\"btn btn-success mb-2 float-left\">Add new Job <i className=\"fa fa-plus ml-1 mr-1\"></i></button>\n              <SearchSort onSearch={this.onSearch} onSort={this.onSort}\n                sortBy={sortBy}\n                sortValue={sortValue}\n              />\n              <div className=\"tabledata\">\n                <TaskListTable\n                  tasks={tasks}\n                  onDelete={this.onDelete}\n                  onUpdate={this.onUpdate}\n                  onFilter={this.onFilter}\n                />\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}